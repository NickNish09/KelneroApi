require 'rails_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/v1/manager/restaurants", type: :request do
  RESTAURANTS_SIZE = 3

  describe "GET #index" do
    context "with permissions" do
      before do
        @user = create(:user)
        RESTAURANTS_SIZE.times do |i|
          @restaurant = create(:restaurant, user: @user, name: "Restaurante #{i+1}", subdomain: "restaurante_#{i+1}")
        end
        headers = @user.create_new_auth_token if sign_in(@user)
        headers["Subdomain"] = 'app'
        get "http://app.example.com/v1/manager/restaurants", params: {}, headers: headers
      end

      it 'returns status code 200' do
        expect(response).to have_http_status(:success)
      end

      it 'should return all the user restaurants' do
        expect(JSON.parse(response.body).size).to eq(RESTAURANTS_SIZE)
      end
    end
  end

  describe "GET #show" do
    context "with permissions" do
      before do
        @user = create(:user)
        @restaurant = create(:restaurant, user: @user, name: "Restaurante", subdomain: "restaurante")

        headers = @user.create_new_auth_token if sign_in(@user)
        headers["Subdomain"] = 'app'
        get "http://app.example.com/v1/manager/restaurants/#{@restaurant.id}", params: {}, headers: headers
      end

      it 'returns status code 200' do
        expect(response).to have_http_status(:success)
      end

      it 'should return the user restaurant' do
        expect(JSON.parse(response.body)['id']).to eq(@restaurant.id)
        expect(JSON.parse(response.body)['name']).to eq("Restaurante")
      end
    end

    context "without permissions" do
      before do
        @user = create(:user)
        @user_without_permission = create(:user)
        @restaurant = create(:restaurant, user: @user, name: "Restaurante", subdomain: "restaurante")

        headers = @user_without_permission.create_new_auth_token if sign_in(@user_without_permission)
        headers["Subdomain"] = 'app'
        get "http://app.example.com/v1/manager/restaurants/#{@restaurant.id}", params: {}, headers: headers
      end

      it 'returns status code unauthorized' do
        expect(response).to have_http_status(:unauthorized)
      end

      it 'should return an error message' do
        expect(JSON.parse(response.body)['error']).to eq('Apenas o dono do restaurante tem acesso à isso')
      end
    end
  end

  describe "POST #create" do
    context "with valid params" do
      before do
        @user = create(:user)
        restaurants_params = {restaurant: {name: "Restaurante",
                                    opening_hour: "9:00",
                                    closing_hour: "23:00",
                                    is_open: true,
                                    user: @user,
                                    subdomain: "restaurante"}}
        @restaurant_count = @user.restaurants.count
        headers = @user.create_new_auth_token if sign_in(@user)
        headers["Subdomain"] = 'app'
        post "http://app.example.com/v1/manager/restaurants/", params: restaurants_params, headers: headers
      end

      it 'returns status code created' do
        expect(response).to have_http_status(:created)
      end

      it 'should return the menu item created' do
        expect(JSON.parse(response.body)['name']).to eq('Restaurante')
      end

      it 'should create an item in the DB' do
        expect(@user.restaurants.count).to eq @restaurant_count + 1
      end
    end

    context "with invalid params" do
      before do
        @user = create(:user)
        restaurants_params = {restaurant: {name: "",
                                           opening_hour: "9:00",
                                           closing_hour: "23:00",
                                           is_open: true,
                                           user: @user,
                                           subdomain: "restaurante"}}
        @restaurant_count = @user.restaurants.count
        headers = @user.create_new_auth_token if sign_in(@user)
        headers["Subdomain"] = 'app'
        post "http://app.example.com/v1/manager/restaurants/", params: restaurants_params, headers: headers
      end

      it 'returns status code unprocessable_entity' do
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it 'should return an error message' do
        expect(JSON.parse(response.body)['name'][0]).to eq('não pode ficar em branco')
      end

      it 'should not create an item in the DB' do
        expect(@user.restaurants.count).to eq @restaurant_count
      end
    end
  end

  describe "PUT #update" do
    context "with authorized user" do
      context "with valid params" do
        before do
          @user = create(:user)
          @restaurant = create(:restaurant, name: "Restaurante 1", user: @user)
          restaurants_params = {restaurant: {name: "Restaurante Modificado",
                                             opening_hour: "9:00",
                                             closing_hour: "23:00",
                                             is_open: true,
                                             subdomain: "restaurante"}}
          headers = @user.create_new_auth_token if sign_in(@user)
          headers["Subdomain"] = 'app'
          put "http://app.example.com/v1/manager/restaurants/#{@restaurant.id}", params: restaurants_params, headers: headers
        end

        it 'returns status code updated' do
          expect(response).to have_http_status(200)
        end

        it 'should update the restaurant and show it' do
          expect(JSON.parse(response.body)['name']).to eq('Restaurante Modificado')
        end
      end

      context "with invalid params" do
        before do
          @user = create(:user)
          @restaurant = create(:restaurant, name: "Restaurante 1", user: @user)
          restaurants_params = {restaurant: {name: "",
                                             opening_hour: "9:00",
                                             closing_hour: "23:00",
                                             is_open: true,
                                             subdomain: "restaurante"}}
          headers = @user.create_new_auth_token if sign_in(@user)
          headers["Subdomain"] = 'app'
          @restaurant_count = @user.restaurants.count
          put "http://app.example.com/v1/manager/restaurants/#{@restaurant.id}", params: restaurants_params, headers: headers
        end

        it 'returns status code unprocessable_entity' do
          expect(response).to have_http_status(:unprocessable_entity)
        end

        it 'should return an error message' do
          expect(JSON.parse(response.body)['name'][0]).to eq('não pode ficar em branco')
        end

        it 'should not create an item in the DB' do
          expect(@user.restaurants.count).to eq @restaurant_count
        end

      end
    end

    context "with unauthorized user" do
      before do
        @user = create(:user)
        @user_without_permission = create(:user)
        @restaurant = create(:restaurant, name: "Restaurante 1", user: @user)
        restaurants_params = {restaurant: {name: "Vou trolar seu restaurante",
                                           opening_hour: "9:00",
                                           closing_hour: "23:00",
                                           is_open: true,
                                           subdomain: "restaurante"}}
        headers = @user_without_permission.create_new_auth_token if sign_in(@user_without_permission)
        headers["Subdomain"] = 'app'
        put "http://app.example.com/v1/manager/restaurants/#{@restaurant.id}", params: restaurants_params, headers: headers
      end

      it 'returns status code unauthorized' do
        expect(response).to have_http_status(:unauthorized)
      end

      it 'should return an error message' do
        expect(JSON.parse(response.body)['error']).to eq('Apenas o dono do restaurante tem acesso à isso')
      end

    end
  end

  describe "DELETE #destroy" do
    context "with user authorized" do
      before do
        @user = create(:user)
        @restaurant = create(:restaurant, name: "Restaurante 1", user: @user)
        @restaurant_count = @user.restaurants.count
        headers = @user.create_new_auth_token if sign_in(@user)
        headers["Subdomain"] = 'app'
        delete "http://app.example.com/v1/manager/restaurants/#{@restaurant.id}", params: {}, headers: headers
      end

      it 'returns status code deleted' do
        expect(response).to have_http_status(204)
      end

      it 'should delete the item' do
        expect(@user.restaurants.count).to eq @restaurant_count - 1
      end
    end

    context "with user unauthorized" do
      before do
        @user = create(:user)
        @user_without_permission = create(:user)
        @restaurant = create(:restaurant, name: "Restaurante 1", user: @user)
        @restaurant_count = @user.restaurants.count
        headers = @user_without_permission.create_new_auth_token if sign_in(@user_without_permission)
        headers["Subdomain"] = 'app'
        delete "http://app.example.com/v1/manager/restaurants/#{@restaurant.id}", params: {}, headers: headers
      end

      it 'returns status code unauthorized' do
        expect(response).to have_http_status(:unauthorized)
      end

      it 'should not delete the item' do
        expect(@user.restaurants.count).to eq @restaurant_count
      end
    end

  end
end
